// source: covid_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function () {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.protos.CountriesData', null, global);
goog.exportSymbol('proto.protos.CountryData', null, global);
goog.exportSymbol('proto.protos.Date', null, global);
goog.exportSymbol('proto.protos.Empty', null, global);
goog.exportSymbol('proto.protos.GetAllDataResponse', null, global);
goog.exportSymbol('proto.protos.GetCountriesDataRequest', null, global);
goog.exportSymbol('proto.protos.GetCountriesDataResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Date = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.Date.displayName = 'proto.protos.Date';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GetAllDataResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.GetAllDataResponse.repeatedFields_, null);
};
goog.inherits(proto.protos.GetAllDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GetAllDataResponse.displayName = 'proto.protos.GetAllDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GetCountriesDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.GetCountriesDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GetCountriesDataRequest.displayName = 'proto.protos.GetCountriesDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GetCountriesDataResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.GetCountriesDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GetCountriesDataResponse.displayName = 'proto.protos.GetCountriesDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.CountryData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.CountryData.repeatedFields_, null);
};
goog.inherits(proto.protos.CountryData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.CountryData.displayName = 'proto.protos.CountryData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.CountriesData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.CountriesData.repeatedFields_, null);
};
goog.inherits(proto.protos.CountriesData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.CountriesData.displayName = 'proto.protos.CountriesData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.Empty.displayName = 'proto.protos.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protos.Date.prototype.toObject = function (opt_includeInstance) {
    return proto.protos.Date.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protos.Date} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protos.Date.toObject = function (includeInstance, msg) {
    var f, obj = {
      year: jspb.Message.getFieldWithDefault(msg, 1, 0),
      month: jspb.Message.getFieldWithDefault(msg, 2, 0),
      day: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Date}
 */
proto.protos.Date.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Date;
  return proto.protos.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Date}
 */
proto.protos.Date.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setYear(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setMonth(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDay(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Date.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protos.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Date.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.protos.Date.prototype.getYear = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.Date} returns this
 */
proto.protos.Date.prototype.setYear = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 month = 2;
 * @return {number}
 */
proto.protos.Date.prototype.getMonth = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.Date} returns this
 */
proto.protos.Date.prototype.setMonth = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 day = 3;
 * @return {number}
 */
proto.protos.Date.prototype.getDay = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.Date} returns this
 */
proto.protos.Date.prototype.setDay = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.GetAllDataResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protos.GetAllDataResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.protos.GetAllDataResponse.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protos.GetAllDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protos.GetAllDataResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      firstDate: (f = msg.getFirstDate()) && proto.protos.Date.toObject(includeInstance, f),
      lastDate: (f = msg.getLastDate()) && proto.protos.Date.toObject(includeInstance, f),
      dataList: jspb.Message.toObjectList(msg.getDataList(),
        proto.protos.CountriesData.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GetAllDataResponse}
 */
proto.protos.GetAllDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GetAllDataResponse;
  return proto.protos.GetAllDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GetAllDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GetAllDataResponse}
 */
proto.protos.GetAllDataResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protos.Date;
        reader.readMessage(value, proto.protos.Date.deserializeBinaryFromReader);
        msg.setFirstDate(value);
        break;
      case 2:
        var value = new proto.protos.Date;
        reader.readMessage(value, proto.protos.Date.deserializeBinaryFromReader);
        msg.setLastDate(value);
        break;
      case 3:
        var value = new proto.protos.CountriesData;
        reader.readMessage(value, proto.protos.CountriesData.deserializeBinaryFromReader);
        msg.addData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GetAllDataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protos.GetAllDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GetAllDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetAllDataResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFirstDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.Date.serializeBinaryToWriter
    );
  }
  f = message.getLastDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.Date.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.protos.CountriesData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Date first_date = 1;
 * @return {?proto.protos.Date}
 */
proto.protos.GetAllDataResponse.prototype.getFirstDate = function () {
  return /** @type{?proto.protos.Date} */ (
    jspb.Message.getWrapperField(this, proto.protos.Date, 1));
};


/**
 * @param {?proto.protos.Date|undefined} value
 * @return {!proto.protos.GetAllDataResponse} returns this
*/
proto.protos.GetAllDataResponse.prototype.setFirstDate = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.GetAllDataResponse} returns this
 */
proto.protos.GetAllDataResponse.prototype.clearFirstDate = function () {
  return this.setFirstDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.GetAllDataResponse.prototype.hasFirstDate = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Date last_date = 2;
 * @return {?proto.protos.Date}
 */
proto.protos.GetAllDataResponse.prototype.getLastDate = function () {
  return /** @type{?proto.protos.Date} */ (
    jspb.Message.getWrapperField(this, proto.protos.Date, 2));
};


/**
 * @param {?proto.protos.Date|undefined} value
 * @return {!proto.protos.GetAllDataResponse} returns this
*/
proto.protos.GetAllDataResponse.prototype.setLastDate = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.GetAllDataResponse} returns this
 */
proto.protos.GetAllDataResponse.prototype.clearLastDate = function () {
  return this.setLastDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.GetAllDataResponse.prototype.hasLastDate = function () {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CountriesData data = 3;
 * @return {!Array<!proto.protos.CountriesData>}
 */
proto.protos.GetAllDataResponse.prototype.getDataList = function () {
  return /** @type{!Array<!proto.protos.CountriesData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.CountriesData, 3));
};


/**
 * @param {!Array<!proto.protos.CountriesData>} value
 * @return {!proto.protos.GetAllDataResponse} returns this
*/
proto.protos.GetAllDataResponse.prototype.setDataList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.protos.CountriesData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.CountriesData}
 */
proto.protos.GetAllDataResponse.prototype.addData = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protos.CountriesData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.GetAllDataResponse} returns this
 */
proto.protos.GetAllDataResponse.prototype.clearDataList = function () {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protos.GetCountriesDataRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.protos.GetCountriesDataRequest.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protos.GetCountriesDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protos.GetCountriesDataRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      date: (f = msg.getDate()) && proto.protos.Date.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GetCountriesDataRequest}
 */
proto.protos.GetCountriesDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GetCountriesDataRequest;
  return proto.protos.GetCountriesDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GetCountriesDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GetCountriesDataRequest}
 */
proto.protos.GetCountriesDataRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protos.Date;
        reader.readMessage(value, proto.protos.Date.deserializeBinaryFromReader);
        msg.setDate(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GetCountriesDataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protos.GetCountriesDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GetCountriesDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetCountriesDataRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional Date date = 1;
 * @return {?proto.protos.Date}
 */
proto.protos.GetCountriesDataRequest.prototype.getDate = function () {
  return /** @type{?proto.protos.Date} */ (
    jspb.Message.getWrapperField(this, proto.protos.Date, 1));
};


/**
 * @param {?proto.protos.Date|undefined} value
 * @return {!proto.protos.GetCountriesDataRequest} returns this
*/
proto.protos.GetCountriesDataRequest.prototype.setDate = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.GetCountriesDataRequest} returns this
 */
proto.protos.GetCountriesDataRequest.prototype.clearDate = function () {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.GetCountriesDataRequest.prototype.hasDate = function () {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protos.GetCountriesDataResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.protos.GetCountriesDataResponse.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protos.GetCountriesDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protos.GetCountriesDataResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      countriesData: (f = msg.getCountriesData()) && proto.protos.CountriesData.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GetCountriesDataResponse}
 */
proto.protos.GetCountriesDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GetCountriesDataResponse;
  return proto.protos.GetCountriesDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GetCountriesDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GetCountriesDataResponse}
 */
proto.protos.GetCountriesDataResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protos.CountriesData;
        reader.readMessage(value, proto.protos.CountriesData.deserializeBinaryFromReader);
        msg.setCountriesData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GetCountriesDataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protos.GetCountriesDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GetCountriesDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetCountriesDataResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCountriesData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.CountriesData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CountriesData countries_data = 1;
 * @return {?proto.protos.CountriesData}
 */
proto.protos.GetCountriesDataResponse.prototype.getCountriesData = function () {
  return /** @type{?proto.protos.CountriesData} */ (
    jspb.Message.getWrapperField(this, proto.protos.CountriesData, 1));
};


/**
 * @param {?proto.protos.CountriesData|undefined} value
 * @return {!proto.protos.GetCountriesDataResponse} returns this
*/
proto.protos.GetCountriesDataResponse.prototype.setCountriesData = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.GetCountriesDataResponse} returns this
 */
proto.protos.GetCountriesDataResponse.prototype.clearCountriesData = function () {
  return this.setCountriesData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.GetCountriesDataResponse.prototype.hasCountriesData = function () {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.CountryData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protos.CountryData.prototype.toObject = function (opt_includeInstance) {
    return proto.protos.CountryData.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protos.CountryData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protos.CountryData.toObject = function (includeInstance, msg) {
    var f, obj = {
      country: jspb.Message.getFieldWithDefault(msg, 1, ""),
      iso3sList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
      date: (f = msg.getDate()) && proto.protos.Date.toObject(includeInstance, f),
      confirmed: jspb.Message.getFieldWithDefault(msg, 4, 0),
      recovered: jspb.Message.getFieldWithDefault(msg, 5, 0),
      deaths: jspb.Message.getFieldWithDefault(msg, 6, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.CountryData}
 */
proto.protos.CountryData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.CountryData;
  return proto.protos.CountryData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.CountryData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.CountryData}
 */
proto.protos.CountryData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setCountry(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.addIso3s(value);
        break;
      case 3:
        var value = new proto.protos.Date;
        reader.readMessage(value, proto.protos.Date.deserializeBinaryFromReader);
        msg.setDate(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setConfirmed(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setRecovered(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDeaths(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.CountryData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protos.CountryData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.CountryData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CountryData.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIso3sList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.Date.serializeBinaryToWriter
    );
  }
  f = message.getConfirmed();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRecovered();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDeaths();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.protos.CountryData.prototype.getCountry = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.setCountry = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string iso3s = 2;
 * @return {!Array<string>}
 */
proto.protos.CountryData.prototype.getIso3sList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.setIso3sList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.addIso3s = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.clearIso3sList = function () {
  return this.setIso3sList([]);
};


/**
 * optional Date date = 3;
 * @return {?proto.protos.Date}
 */
proto.protos.CountryData.prototype.getDate = function () {
  return /** @type{?proto.protos.Date} */ (
    jspb.Message.getWrapperField(this, proto.protos.Date, 3));
};


/**
 * @param {?proto.protos.Date|undefined} value
 * @return {!proto.protos.CountryData} returns this
*/
proto.protos.CountryData.prototype.setDate = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.clearDate = function () {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CountryData.prototype.hasDate = function () {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 confirmed = 4;
 * @return {number}
 */
proto.protos.CountryData.prototype.getConfirmed = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.setConfirmed = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 recovered = 5;
 * @return {number}
 */
proto.protos.CountryData.prototype.getRecovered = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.setRecovered = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 deaths = 6;
 * @return {number}
 */
proto.protos.CountryData.prototype.getDeaths = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.CountryData} returns this
 */
proto.protos.CountryData.prototype.setDeaths = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.CountriesData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protos.CountriesData.prototype.toObject = function (opt_includeInstance) {
    return proto.protos.CountriesData.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protos.CountriesData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protos.CountriesData.toObject = function (includeInstance, msg) {
    var f, obj = {
      date: (f = msg.getDate()) && proto.protos.Date.toObject(includeInstance, f),
      countriesList: jspb.Message.toObjectList(msg.getCountriesList(),
        proto.protos.CountryData.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.CountriesData}
 */
proto.protos.CountriesData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.CountriesData;
  return proto.protos.CountriesData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.CountriesData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.CountriesData}
 */
proto.protos.CountriesData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protos.Date;
        reader.readMessage(value, proto.protos.Date.deserializeBinaryFromReader);
        msg.setDate(value);
        break;
      case 2:
        var value = new proto.protos.CountryData;
        reader.readMessage(value, proto.protos.CountryData.deserializeBinaryFromReader);
        msg.addCountries(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.CountriesData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protos.CountriesData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.CountriesData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CountriesData.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.Date.serializeBinaryToWriter
    );
  }
  f = message.getCountriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protos.CountryData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Date date = 1;
 * @return {?proto.protos.Date}
 */
proto.protos.CountriesData.prototype.getDate = function () {
  return /** @type{?proto.protos.Date} */ (
    jspb.Message.getWrapperField(this, proto.protos.Date, 1));
};


/**
 * @param {?proto.protos.Date|undefined} value
 * @return {!proto.protos.CountriesData} returns this
*/
proto.protos.CountriesData.prototype.setDate = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CountriesData} returns this
 */
proto.protos.CountriesData.prototype.clearDate = function () {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CountriesData.prototype.hasDate = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CountryData countries = 2;
 * @return {!Array<!proto.protos.CountryData>}
 */
proto.protos.CountriesData.prototype.getCountriesList = function () {
  return /** @type{!Array<!proto.protos.CountryData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.CountryData, 2));
};


/**
 * @param {!Array<!proto.protos.CountryData>} value
 * @return {!proto.protos.CountriesData} returns this
*/
proto.protos.CountriesData.prototype.setCountriesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protos.CountryData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.CountryData}
 */
proto.protos.CountriesData.prototype.addCountries = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protos.CountryData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.CountriesData} returns this
 */
proto.protos.CountriesData.prototype.clearCountriesList = function () {
  return this.setCountriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protos.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.protos.Empty.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protos.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protos.Empty.toObject = function (includeInstance, msg) {
    var f, obj = {

    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Empty}
 */
proto.protos.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Empty;
  return proto.protos.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Empty}
 */
proto.protos.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protos.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.protos);
